O que é Programação Orientada a Objetos?

-Um paradigma de desenvolvimento
-Uma maneira de resolver um problema, um modo de pensar
-Não está ligado somente à linguagem de programação, mas a um entendimento amplo e atemporal para criação de softwares

Utilização no mercado

-Na maioria dos sistemas atuais
-Varias linguagens(JS, TS, Java, Python)
-Utilizado por analistas de sistemas e não somente por programadores
    +Na fase de levantamento de requisistos de sistemas
    +Via gráficos, desenhos e textos

Onde e quando eu vou utilizar ?

-linguagens
-Quando quiser aplicar padrões de projeto
-Quando quiser organizar seu código
-Para melhor entendimento do código, pensando nele como Objetos
-Quando precisar fazer reuso de código
-Para separar a complexidade de código, abstrair código e expor de maneira mais simples
-Para classificar as rotinas e trechos de código

Conceitos

-Precisamos entender os conceitos e paradigma e não somente códigos
-Uma boa fundamentação

Objetos ==========================================================================================

-Todo objeto possui
    +Propriedades e Funcionalidades
    +Estado e Comportamentos
    +Atributos e Métodos

Abstaratos vs Mundo Real

-Trazemos a representação de algo do mundo real para Objetos
    +Pessoa
    +Aluno
    +Produto
    +Carrinho de Compra
-Porém, alguns objetos na programação não são fáceis de identificar, pois são abstratos como, por exemplo:
    +Autenticação
    +Autorização

Nem todo objeto do mundo real fará parte do seu sistema


Classes ==========================================================================================

-As classes na orientação a objetos funcionam como um molde para os objetos. Os objetos são criados a partir de uma classe e muitos deles podem ser feitos da mesma classe.

Exemplo: Máquina de biscoito
    +Instâncias


Classes em JS

-Syntactical sugar (maneira mais bonitinha de representar prototipos)
-prototype
-todas classes automaticamente já herdam de outras classes nativas do JS

Encapsulamento ===================================================================================

-Colocar numa cápsula
-Agurpamento de funções e variáveis
-Esconder detalhes de implementação
-Camada de segurança para os atributos e métodos

Confusão e Solução

-Programação Estruturada
    +Processa a entrada emanipulação dos dados, até a saida
    +Uso de sequências, estruturas de repetições e condições
    +Uso de uma rotina maior, ou sub-rotinas
    +Não existem restrições às variáveis

-Programação Orientada a Objetos
    +Surge para trazer um cuidado ao uso estruturado
        +Não elimina por completo o uso estruturado
    +Conceitos como Objetos e Classes
    +Cuidados com variáveis e rotinas(Encapsulamento)
    +Melhor reuso de código (Herança)

Herança ==========================================================================================

-Pais e Filhos
-Objetos podem herdar, ou estender, caracteristicas bases
-Uma cópia de atributos e métodos de outra classe

-Um objeto pode estender de outro objeto que pode estender de outro objeto
-Fácil reutilização de código

Polimorfismo =====================================================================================

-Quando um objeto estende de outro (Herança) talvez haja a necessidade de reescrever uma ou mais caracteristicas (atributos e métodos) nesse novo objeto
-Recriaremos então um método (ou mais) da classe herdada
-Polimorfismo significa muitas formas

Abstração ========================================================================================

-Template ou identidade de uma classe que será cnstruida no futuro
-Atributos e métodos podem ser criados na classe de Abstração (Superclasse) MAS
-A implementação dos métodos e atributos, só poderá ser feita na classe que irá herdar essa Abstração